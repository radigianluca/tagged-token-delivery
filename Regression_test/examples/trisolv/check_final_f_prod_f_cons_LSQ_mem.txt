

======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type type = "Fork!!


		 Triggering the more_prod_than_cons case!!!!

	The consumer deps before calling addLoopsExitstoDeps_ProdInConsOut are: 
****************Inside FindLoopExits_ProdInConsOut*********

	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB4 , 


	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is inside this loop!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  not C4 &  + 


	 Add a SUPPRESS with f_supp = 
 C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!


======================================================


New (Producer,Consumer) pair: (BB2, BB4)

Consumer of type type = "Merge!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  not C2 &  + 


	 Add a SUPPRESS with f_supp = 
 C2 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB4)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB2, BB4)

Consumer of type type = "Merge!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  not C2 &  + 


	 Add a SUPPRESS with f_supp = 
 C2 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!


======================================================


New (Producer,Consumer) pair: (BB4, BB4)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C4 &  + 


	 Add a SUPPRESS with f_supp = 
 not C4 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!
