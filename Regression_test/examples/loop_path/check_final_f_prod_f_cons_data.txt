

======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB3, BB2)

Consumer of type LLVM Phi!!


		 Triggering the backward edge case when the consumer is LLVM PHI_ !!!!

		 Printing the SOP of the SUPP in this case! The condition is opposite to SUPPRESS!!:
 C3 &  + 


	Inside applyShannon

	Printing the f_supp after converting it to string
1 + 


F_SUPP is a single condition!!
	The condition is not inverted!!

	 Not printing the Boolean expressions since we are in a case of LLVM PHI!!

======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  1 


	 Don't need to add a SUPPRESS!!



======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type type = "Operator!!


		 Triggering the normal non-loop addSuppress case!!!!

	 The finalized f_prod =  1 


	 The finalized f_cons =  C2 &  + 


	 Add a SUPPRESS with f_supp = 
 not C2 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
0 + 


F_SUPP is a single condition!!
	The condition is inverted!!


======================================================


New (Producer,Consumer) pair: (BB2, BB4)

Consumer of type LLVM Phi!!


	 Inserted a virtualBB between BB2 and BB4


		 Triggering the more_prod_than_cons case!!!!

	The consumer deps before calling addLoopsExitstoDeps_ProdInConsOut are: 
****************Inside FindLoopExits_ProdInConsOut*********

	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB2 , BB3 , 


	 The finalized f_prod =  1 


	 The finalized f_cons =  not C2 &  +  C2 &  not C3 &  + 


	 Add a SUPPRESS with f_supp = 
 C2 &  C3 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
11 + 


F_SUPP is a big condition!!

************ About to print the details of a MUX ***********
	The MUX has non-MUX inputs!!!
	The SEL of the MUX is: 2

	The size of in0 of the MUX is: 1 and the expressions are 

0 &  + 

	The size of in1 of the MUX is: 1 and the expressions are 

C3 &  + 



======================================================


New (Producer,Consumer) pair: (BB3, BB4)

Consumer of type LLVM Phi!!


	 Inserted a virtualBB between BB3 and BB4


		 Triggering the more_prod_than_cons case!!!!

	The consumer deps before calling addLoopsExitstoDeps_ProdInConsOut are: 
****************Inside FindLoopExits_ProdInConsOut*********

	Starting a new loop in the loop nest containing the producerBB!!

	The consumer is not inside this loop!!

	The loop exits of this loop are: BB2 , BB3 , 


	 The finalized f_prod =  1 


	 The finalized f_cons =  not C2 &  +  C2 &  not C3 &  + 


	 Add a SUPPRESS with f_supp = 
 C2 &  C3 &  + 


	Right before calling applyShannon, the size of f_supp is: 1

	Inside applyShannon

	Printing the f_supp after converting it to string
11 + 


F_SUPP is a big condition!!

************ About to print the details of a MUX ***********
	The MUX has non-MUX inputs!!!
	The SEL of the MUX is: 2

	The size of in0 of the MUX is: 1 and the expressions are 

0 &  + 

	The size of in1 of the MUX is: 1 and the expressions are 

C3 &  + 

