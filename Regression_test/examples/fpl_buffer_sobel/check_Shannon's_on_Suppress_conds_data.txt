

======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB9, BB2)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C9 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C9 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C9 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
8, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C10 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C10 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C10 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
9, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB10, BB2)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C10 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C10 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C10 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
9, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB1, BB2)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB9, BB3)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C9 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C9 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C9 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
8, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB9, BB3)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C9 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C9 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C9 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
8, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB7, BB5)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB5)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB5)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB4, BB5)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type LLVM Phi!!


#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
1

	Printing the f_supp after converting it to string
1 + 


**********************************************


Printing the funct_vec of the expression initially
C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB7)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB7)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB8)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 & C7 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
x1
1x

	Printing the f_supp after converting it to string
x1 + 1x + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
5, 
The size of present_variables is: 2
Leaving hasMultipleVariables!


The initial expression has multiple variables! 

The least var index of the initial expression is: 5

Printing the in0 details of the resulting MUX
C7 &  + 


Printing the in1 details of the resulting MUX
1 &  + 


Check if you need to apply co-factor again on in0


Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables in in0 to do Shannon's!

Check if you need to apply co-factor again on in1


Inside hasMultipleVariables!

The list of var_index of these variables is: 
-1, 
The size of present_variables is: 0
Leaving hasMultipleVariables!

Not many variables in in1 to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB6, BB8)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 & C7 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
x1
1x

	Printing the f_supp after converting it to string
x1 + 1x + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
5, 
The size of present_variables is: 2
Leaving hasMultipleVariables!


The initial expression has multiple variables! 

The least var index of the initial expression is: 5

Printing the in0 details of the resulting MUX
C7 &  + 


Printing the in1 details of the resulting MUX
1 &  + 


Check if you need to apply co-factor again on in0


Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables in in0 to do Shannon's!

Check if you need to apply co-factor again on in1


Inside hasMultipleVariables!

The list of var_index of these variables is: 
-1, 
The size of present_variables is: 0
Leaving hasMultipleVariables!

Not many variables in in1 to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB6, BB8)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 & C7 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
x1
1x

	Printing the f_supp after converting it to string
x1 + 1x + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
5, 
The size of present_variables is: 2
Leaving hasMultipleVariables!


The initial expression has multiple variables! 

The least var index of the initial expression is: 5

Printing the in0 details of the resulting MUX
C7 &  + 


Printing the in1 details of the resulting MUX
1 &  + 


Check if you need to apply co-factor again on in0


Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables in in0 to do Shannon's!

Check if you need to apply co-factor again on in1


Inside hasMultipleVariables!

The list of var_index of these variables is: 
-1, 
The size of present_variables is: 0
Leaving hasMultipleVariables!

Not many variables in in1 to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB6, BB8)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 & C7 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
x1
1x

	Printing the f_supp after converting it to string
x1 + 1x + 


**********************************************


Printing the funct_vec of the expression initially
C7 &  + C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
5, 
The size of present_variables is: 2
Leaving hasMultipleVariables!


The initial expression has multiple variables! 

The least var index of the initial expression is: 5

Printing the in0 details of the resulting MUX
C7 &  + 


Printing the in1 details of the resulting MUX
1 &  + 


Check if you need to apply co-factor again on in0


Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables in in0 to do Shannon's!

Check if you need to apply co-factor again on in1


Inside hasMultipleVariables!

The list of var_index of these variables is: 
-1, 
The size of present_variables is: 0
Leaving hasMultipleVariables!

Not many variables in in1 to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB3, BB8)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C3 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C3 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C3 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C3 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C3 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
2, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB8, BB9)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB9)

Consumer of type LLVM Phi!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB9)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB9)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB9)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB2, BB10)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB9, BB11)

Consumer of type type = "Operator!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C9 & C10 &  + C9 & C10 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C10 &  + C9 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C10 &  + C9 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C10 &  + C9 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
x1
1x

	Printing the f_supp after converting it to string
x1 + 1x + 


**********************************************


Printing the funct_vec of the expression initially
C10 &  + C9 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
9, 
8, 
The size of present_variables is: 2
Leaving hasMultipleVariables!


The initial expression has multiple variables! 

The least var index of the initial expression is: 8

Printing the in0 details of the resulting MUX
C10 &  + 


Printing the in1 details of the resulting MUX
1 &  + 


Check if you need to apply co-factor again on in0


Inside hasMultipleVariables!

The list of var_index of these variables is: 
9, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables in in0 to do Shannon's!

Check if you need to apply co-factor again on in1


Inside hasMultipleVariables!

The list of var_index of these variables is: 
-1, 
The size of present_variables is: 0
Leaving hasMultipleVariables!

Not many variables in in1 to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type type = "Merge!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB3)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB2

#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C9 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C9 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C9 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C9 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C9 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
8, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB2, BB3)

Consumer of type type = "Mux!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type type = "Merge!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB3

#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type type = "Mux!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB3, BB5)

Consumer of type type = "Merge!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C3 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C3 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C3 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C3 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C3 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
2, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB5)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB3

#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C7 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C7 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C7 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C7 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C7 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
6, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type type = "Merge!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 


======================================================


New (Producer,Consumer) pair: (BB6, BB6)

Consumer of type type = "Merge!!


		 Triggering the producer == consumer case!!!!

	 NEW DEUBUG INFO: The original producer is in BB5

#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): C6 &  + 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): C6 &  + 

#############################################
Inside applyShannon function
The function before converting it to a string is (not considering negations!!): C6 &  + 

#############################################
Inside new_get_binary_string_minterms_Shannons function
The function before converting it to a string is (not considering negations!!): C6 &  + 

********* Inside get_binary_string_minterms *******************
	Printing the minterms_only_in_binary with dontcare bits:
0

	Printing the f_supp after converting it to string
0 + 


**********************************************


Printing the funct_vec of the expression initially
not C6 &  + 



Inside hasMultipleVariables!

The list of var_index of these variables is: 
5, 
The size of present_variables is: 1
Leaving hasMultipleVariables!

Not many variables to do Shannon's!


======================================================


New (Producer,Consumer) pair: (BB5, BB6)

Consumer of type type = "Mux!!


#############################################
Right before calling calculate_F_supp
The f_cons is (not considering negations!!): 
The f_prod is (not considering negations!!): 

#############################################
Right after returning from calculate_F_supp
The f_supp is (not considering negations!!): 
