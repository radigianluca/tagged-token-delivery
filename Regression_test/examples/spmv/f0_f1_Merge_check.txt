

---------------------------------------------------
Node name is "phi_30" of type type = "Merge in BasicBlock number bbID= 6 has 2 predecessors

Considering producer node name "branch_17" of type type = "Branch in BasicBlock number bbID= 3
Found 1 paths
Printing path number 0 details
1 -> 2 -> 3 -> 8 -> 

 Printing all the piers of that path!
1, 3, 


 The trueSuccBB of this pier BB is bbID= 2 and the falseSuccBB of this pier BB is bbID= 7

 The trueSuccBB of this pier BB is bbID= 4 and the falseSuccBB of this pier BB is bbID= 6

Printing the sum of products from START to that virtualBB!
C1 & not C3 &  + 


Considering producer node name "branch_3" of type type = "Branch in BasicBlock number bbID= 5
Found 1 paths
Printing path number 0 details
1 -> 2 -> 3 -> 4 -> 5 -> 8 -> 

 Printing all the piers of that path!
1, 3, 


 The trueSuccBB of this pier BB is bbID= 2 and the falseSuccBB of this pier BB is bbID= 7

 The trueSuccBB of this pier BB is bbID= 4 and the falseSuccBB of this pier BB is bbID= 6

Printing the sum of products from START to that virtualBB!
C1 & C3 &  + 

The current Merge node the following functions: 
	f0 = C1 & not C3 &  + 
	f1 = C1 & C3 &  + 
	
Hii from inside get_binary_sop!

Number of bits is = 2 and Number of truth table rows is = 4

Number of dont-care entries is = 2

Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  00, 
1)  01, 
2)  11, 


Printing the combined prime implicants:
0)  -1
1)  0-


Printing the prime implicant chart
1	
0	

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_ALWAYS:
-1 + 




SEL_ALWAYS = C2 &  + 


Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  00, 
1)  01, 
2)  


Printing the combined prime implicants:
0)  0-


Printing the prime implicant chart
1	1	

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_NOTOKEN:
0- + 




---------------------------------------------------
Node name is "phi_36" of type type = "Merge in BasicBlock number bbID= 7 has 2 predecessors

Considering producer node name "branch_18" of type type = "Branch in BasicBlock number bbID= 1
Found 1 paths
Printing path number 0 details
1 -> 8 -> 

 Printing all the piers of that path!
1, 


 The trueSuccBB of this pier BB is bbID= 2 and the falseSuccBB of this pier BB is bbID= 7

Printing the sum of products from START to that virtualBB!
not C1 &  + 


Considering producer node name "branch_5" of type type = "Branch in BasicBlock number bbID= 6
Found 2 paths
Printing path number 0 details
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 8 -> 

 Printing all the piers of that path!
1, 


 The trueSuccBB of this pier BB is bbID= 2 and the falseSuccBB of this pier BB is bbID= 7
Printing path number 1 details
1 -> 2 -> 3 -> 6 -> 8 -> 

 Printing all the piers of that path!
1, 


 The trueSuccBB of this pier BB is bbID= 2 and the falseSuccBB of this pier BB is bbID= 7

Printing the sum of products from START to that virtualBB!
C1 &  + C1 &  + 

The current Merge node the following functions: 
	f0 = not C1 &  + 
	f1 = C1 &  + 
	
Hii from inside get_binary_sop!

Number of bits is = 1 and Number of truth table rows is = 2

Number of dont-care entries is = 0

Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  
1)  1, 


Printing the combined prime implicants:
0)  1


Printing the prime implicant chart
1	

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_ALWAYS:
1 + 




SEL_ALWAYS = C1 &  + 


Hii from inside the Quine_McCluskey solver!

Printing the prime implicants table in its first state:
0)  
1)  


Printing the combined prime implicants:


Printing the prime implicant chart

Bye, leaving the Quine_McCluskey solver!


 The possible functions for SEL_NOTOKEN:



